/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Lookup
 * Lookup APIs for individual, bulk and job based requests  Discussion topics: - API version to use - Using or not lookup in the path or just as lookups subdomain
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.lookups.bulk;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.exception.ApiConnectionException;

import com.twilio.exception.ApiException;

import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.time.ZonedDateTime;

import java.util.List;
import java.util.Objects;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;


@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Query extends Resource {
    private static final long serialVersionUID = 240604717259919L;

    
        @ToString
        static public class IdentityMatchParameters {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("first_name")
            @Getter @Setter private String firstName;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("last_name")
            @Getter @Setter private String lastName;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("address_line1")
            @Getter @Setter private String addressLine1;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("address_line2")
            @Getter @Setter private String addressLine2;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("city")
            @Getter @Setter private String city;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("state")
            @Getter @Setter private String state;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("postal_code")
            @Getter @Setter private String postalCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("address_country_code")
            @Getter @Setter private String addressCountryCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("national_id")
            @Getter @Setter private String nationalId;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("date_of_birth")
            @Getter @Setter private String dateOfBirth;


            public static IdentityMatchParameters fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, IdentityMatchParameters.class);
            }
        }
        @ToString
        static public class ReassignedNumberRequest {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("last_verified_date")
            @Getter @Setter private String lastVerifiedDate;


            public static ReassignedNumberRequest fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, ReassignedNumberRequest.class);
            }
        }
        @ToString
        static public class LookupRequestWithCorId {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("correlation_id")
            @Getter @Setter private String correlationId;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("phone_number")
            @Getter @Setter private String phoneNumber;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("fields")
            @Getter @Setter private List<String> fields;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("country_code")
            @Getter @Setter private String countryCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("identity_match")
            @Getter @Setter private IdentityMatchParameters identityMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("reassigned_number")
            @Getter @Setter private ReassignedNumberRequest reassignedNumber;


            public static LookupRequestWithCorId fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, LookupRequestWithCorId.class);
            }
        }
        @ToString
        static public class LookupRequest1 {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("lookup_requests")
            @Getter @Setter private List<LookupRequestWithCorId> lookupRequests;

            public LookupRequest1( ) {
            }

            public static LookupRequest1 fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, LookupRequest1.class);
            }
        }
        @ToString
        static public class CallerName {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("caller_name")
            @Getter @Setter private String callerName;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("caller_type")
            @Getter @Setter private String callerType;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private Integer errorCode;


            public static CallerName fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, CallerName.class);
            }
        }
        @ToString
        static public class LastSimSwap {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("last_sim_swap_date")
            @Getter @Setter private ZonedDateTime lastSimSwapDate;
            public String getLastSimSwapDate() {
                return lastSimSwapDate.toInstant().toString();
            }
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("swapped_period")
            @Getter @Setter private String swappedPeriod;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("swapped_in_period")
            @Getter @Setter private Boolean swappedInPeriod;


            public static LastSimSwap fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, LastSimSwap.class);
            }
        }
        @ToString
        static public class SimSwap {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("last_sim_swap")
            @Getter @Setter private LastSimSwap lastSimSwap;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private Integer errorCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_country_code")
            @Getter @Setter private String mobileCountryCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_network_code")
            @Getter @Setter private String mobileNetworkCode;


            public static SimSwap fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, SimSwap.class);
            }
        }
        @ToString
        static public class CallForwarding {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("call_forwarding_enabled")
            @Getter @Setter private Boolean callForwardingEnabled;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private Integer errorCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_country_code")
            @Getter @Setter private String mobileCountryCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_network_code")
            @Getter @Setter private String mobileNetworkCode;


            public static CallForwarding fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, CallForwarding.class);
            }
        }
        @ToString
        static public class LiveActivityCarrier {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("name")
            @Getter @Setter private String name;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("country")
            @Getter @Setter private String country;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_country_code")
            @Getter @Setter private String mobileCountryCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_network_code")
            @Getter @Setter private String mobileNetworkCode;


            public static LiveActivityCarrier fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, LiveActivityCarrier.class);
            }
        }
        @ToString
        static public class LiveActivity {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("connectivity")
            @Getter @Setter private String connectivity;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("original_carrier")
            @Getter @Setter private LiveActivityCarrier originalCarrier;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("ported")
            @Getter @Setter private String ported;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("ported_carrier")
            @Getter @Setter private LiveActivityCarrier portedCarrier;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("roaming")
            @Getter @Setter private String roaming;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("roaming_carrier")
            @Getter @Setter private LiveActivityCarrier roamingCarrier;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private Integer errorCode;


            public static LiveActivity fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, LiveActivity.class);
            }
        }
        @ToString
        static public class LineTypeIntelligence {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("type")
            @Getter @Setter private String type;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private Integer errorCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_country_code")
            @Getter @Setter private String mobileCountryCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("mobile_network_code")
            @Getter @Setter private String mobileNetworkCode;


            public static LineTypeIntelligence fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, LineTypeIntelligence.class);
            }
        }
        @ToString
        static public class IdentityMatch {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("first_name_match")
            @Getter @Setter private String firstNameMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("last_name_match")
            @Getter @Setter private String lastNameMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("address_line_match")
            @Getter @Setter private String addressLineMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("city_match")
            @Getter @Setter private String cityMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("state_match")
            @Getter @Setter private String stateMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("postal_code_match")
            @Getter @Setter private String postalCodeMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("country_code_match")
            @Getter @Setter private String countryCodeMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("national_id_match")
            @Getter @Setter private String nationalIdMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("date_of_birth_match")
            @Getter @Setter private String dateOfBirthMatch;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("summary_score")
            @Getter @Setter private Integer summaryScore;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private Integer errorCode;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_message")
            @Getter @Setter private String errorMessage;


            public static IdentityMatch fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, IdentityMatch.class);
            }
        }
        @ToString
        static public class ReassignedNumberResponse {
            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("last_verified_date")
            @Getter @Setter private String lastVerifiedDate;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("status")
            @Getter @Setter private String status;

            @JsonInclude(JsonInclude.Include.NON_EMPTY)
            @JsonProperty("error_code")
            @Getter @Setter private String errorCode;


            public static ReassignedNumberResponse fromJson(String jsonString, ObjectMapper mapper) throws IOException {
                return mapper.readValue(jsonString, ReassignedNumberResponse.class);
            }
        }

    public static QueryReader reader(){
        return new QueryReader();
    }

    /**
    * Converts a JSON String into a Query object using the provided ObjectMapper.
    *
    * @param json Raw JSON String
    * @param objectMapper Jackson ObjectMapper
    * @return Query object represented by the provided JSON
    */
    public static Query fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Query.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
    * Converts a JSON InputStream into a Query object using the provided
    * ObjectMapper.
    *
    * @param json Raw JSON InputStream
    * @param objectMapper Jackson ObjectMapper
    * @return Query object represented by the provided JSON
    */
    public static Query fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Query.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }
    public static String toJson(Object object, ObjectMapper mapper) {
        try {
            return mapper.writeValueAsString(object);
        } catch (final JsonMappingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (JsonProcessingException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String correlationId;
    private final Integer twilioErrorCode;
    private final String callingCountryCode;
    private final String countryCode;
    private final String phoneNumber;
    private final String nationalFormat;
    private final Boolean valid;
    private final List<String> validationErrors;
    private final CallerName callerName;
    private final SimSwap simSwap;
    private final CallForwarding callForwarding;
    private final LiveActivity liveActivity;
    private final LineTypeIntelligence lineTypeIntelligence;
    private final IdentityMatch identityMatch;
    private final ReassignedNumberResponse reassignedNumber;

    @JsonCreator
    private Query(
        @JsonProperty("correlation_id")
        final String correlationId,

        @JsonProperty("twilio_error_code")
        final Integer twilioErrorCode,

        @JsonProperty("calling_country_code")
        final String callingCountryCode,

        @JsonProperty("country_code")
        final String countryCode,

        @JsonProperty("phone_number")
        final String phoneNumber,

        @JsonProperty("national_format")
        final String nationalFormat,

        @JsonProperty("valid")
        final Boolean valid,

        @JsonProperty("validation_errors")
        final List<String> validationErrors,

        @JsonProperty("caller_name")
        final CallerName callerName,

        @JsonProperty("sim_swap")
        final SimSwap simSwap,

        @JsonProperty("call_forwarding")
        final CallForwarding callForwarding,

        @JsonProperty("live_activity")
        final LiveActivity liveActivity,

        @JsonProperty("line_type_intelligence")
        final LineTypeIntelligence lineTypeIntelligence,

        @JsonProperty("identity_match")
        final IdentityMatch identityMatch,

        @JsonProperty("reassigned_number")
        final ReassignedNumberResponse reassignedNumber
    ) {
        this.correlationId = correlationId;
        this.twilioErrorCode = twilioErrorCode;
        this.callingCountryCode = callingCountryCode;
        this.countryCode = countryCode;
        this.phoneNumber = phoneNumber;
        this.nationalFormat = nationalFormat;
        this.valid = valid;
        this.validationErrors = validationErrors;
        this.callerName = callerName;
        this.simSwap = simSwap;
        this.callForwarding = callForwarding;
        this.liveActivity = liveActivity;
        this.lineTypeIntelligence = lineTypeIntelligence;
        this.identityMatch = identityMatch;
        this.reassignedNumber = reassignedNumber;
    }

        public final String getCorrelationId() {
            return this.correlationId;
        }
        public final Integer getTwilioErrorCode() {
            return this.twilioErrorCode;
        }
        public final String getCallingCountryCode() {
            return this.callingCountryCode;
        }
        public final String getCountryCode() {
            return this.countryCode;
        }
        public final String getPhoneNumber() {
            return this.phoneNumber;
        }
        public final String getNationalFormat() {
            return this.nationalFormat;
        }
        public final Boolean getValid() {
            return this.valid;
        }
        public final List<String> getValidationErrors() {
            return this.validationErrors;
        }
        public final CallerName getCallerName() {
            return this.callerName;
        }
        public final SimSwap getSimSwap() {
            return this.simSwap;
        }
        public final CallForwarding getCallForwarding() {
            return this.callForwarding;
        }
        public final LiveActivity getLiveActivity() {
            return this.liveActivity;
        }
        public final LineTypeIntelligence getLineTypeIntelligence() {
            return this.lineTypeIntelligence;
        }
        public final IdentityMatch getIdentityMatch() {
            return this.identityMatch;
        }
        public final ReassignedNumberResponse getReassignedNumber() {
            return this.reassignedNumber;
        }

    @Override
    public boolean equals(final Object o) {
        if (this==o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Query other = (Query) o;

        return Objects.equals(correlationId, other.correlationId) &&  Objects.equals(twilioErrorCode, other.twilioErrorCode) &&  Objects.equals(callingCountryCode, other.callingCountryCode) &&  Objects.equals(countryCode, other.countryCode) &&  Objects.equals(phoneNumber, other.phoneNumber) &&  Objects.equals(nationalFormat, other.nationalFormat) &&  Objects.equals(valid, other.valid) &&  Objects.equals(validationErrors, other.validationErrors) &&  Objects.equals(callerName, other.callerName) &&  Objects.equals(simSwap, other.simSwap) &&  Objects.equals(callForwarding, other.callForwarding) &&  Objects.equals(liveActivity, other.liveActivity) &&  Objects.equals(lineTypeIntelligence, other.lineTypeIntelligence) &&  Objects.equals(identityMatch, other.identityMatch) &&  Objects.equals(reassignedNumber, other.reassignedNumber)  ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(correlationId, twilioErrorCode, callingCountryCode, countryCode, phoneNumber, nationalFormat, valid, validationErrors, callerName, simSwap, callForwarding, liveActivity, lineTypeIntelligence, identityMatch, reassignedNumber);
    }


}

